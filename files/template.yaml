{{#with cluster}}
ESCluster:
  Type: AWS::Elasticsearch::Domain
  Properties:
    DomainName: {{domain}}
    ElasticsearchVersion: "6.3"
    EBSOptions:
      EBSEnabled: true
      VolumeType: gp2
      {{#if diskSize}}
      VolumeSize: {{diskSize}}
      {{/if}}
    {{#if @root.cluster}}
    ElasticsearchClusterConfig:
      {{#with master}}
      DedicatedMasterCount: {{count}}
      DedicatedMasterEnabled: true
      DedicatedMasterType: {{type}}
      {{/with}}
      {{#with nodes}}
      InstanceCount: {{count}}
      InstanceType: {{type}}
      ZoneAwarenessEnabled: {{highAvailability}}
      {{/with}}
    {{/if}}
    {{#if snapshot}}
    SnapshotOptions:
      AutomatedSnapshotStartHour: 0
    {{/if}}
    Tags:
      {{#each @root.tags}}
      - Key: {{Key}}
        Value: {{Value}}
      {{/each}}
{{/with}}


{{#with stream}}
KinesisLambdaRole:
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: {{lambda.name}}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ]
              Resource: arn:aws:logs:*:*:log-group:/aws/lambda/{{lambda.name}}:*
            - Effect: Allow
              Action: [
                "kinesis:DescribeStream",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListStreams"
              ]
              Resource: ["arn:aws:kinesis:{{@root.region}}:{{@root.accountID}}:*"]

KinesisLambda:
  DependsOn:
    - ESCluster
    - KinesisLambdaRole
  Type: "AWS::Lambda::Function"
  Properties:
    FunctionName: {{lambda.name}}
    Handler: "files/index.handler"
    Role:
      "Fn::GetAtt": [KinesisLambdaRole, Arn]
    Runtime: nodejs8.10
    Timeout: 120
    Environment:
      Variables:
        indexName: logs
        indexType: logs
        endpoint:
          "Fn::GetAtt": [ESCluster, DomainEndpoint]
    Code:
      S3Bucket: {{lambda.bucket}}
      S3Key: {{lambda.key}}

KinesisRole:
  DependsOn:
    - ESCluster
    - KinesisLambda
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - kinesis.amazonaws.com
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: {{name}}-role
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: [
                "lambda:InvokeFunction",
                "lambda:GetFunctionConfiguration"
              ]
              Resource: [{{lambda.arn}}]

KinesisStream:
  DependsOn:
    - ESCluster
    - KinesisRole
    - KinesisLambda
  Type: AWS::Kinesis::Stream
  Properties:
    Name: {{name}}
    RetentionPeriodHours: 24
    ShardCount: 5

KinesisTrigger:
  DependsOn:
    - KinesisLambda
    - KinesisStream
  Type: AWS::Lambda::EventSourceMapping
  Properties:
    BatchSize: 10
    Enabled: true
    EventSourceArn: "arn:aws:kinesis:{{@root.region}}:{{@root.accountID}}:stream/{{name}}"
    FunctionName: {{lambda.arn}}
    StartingPosition: LATEST


LogRole:
  DependsOn:
    - KinesisStream
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "logs.{{@root.region}}.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: {{name}}-log-role
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ["kinesis:*"]
              Resource: ["arn:aws:kinesis:{{@root.region}}:{{@root.accountID}}:*"]
            - Effect: Allow
              Action: ["iam:PassRole"]
              Resource: ["arn:aws:iam::{{@root.accountID}}:role/{{name}}-log-role"]

{{/with}}


{{#each logs}}
SubscriptonFilter{{templateName}}:
  DependsOn:
    - KinesisStream
  Type: AWS::Logs::SubscriptionFilter
  Properties:
    DestinationArn:
      "Fn::GetAtt": [KinesisStream, Arn]
    FilterPattern: "?REPORT ?INFO ?WARN ?ERROR ?JSON"
    LogGroupName: {{name}}
    RoleArn:
      "Fn::GetAtt": [LogRole, Arn]
{{/each}}
